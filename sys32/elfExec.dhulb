imply u32 findSeg();
#define RELOC 262144
typealias Elf32_Addr u32;
typealias Elf32_Half u16;
typealias Elf32_Off u32;
typealias Elf32_Sword s32;
typealias Elf32_Word u32;
structure Elf32_Ehdr {
	u8 e_ident,
	u8 e_ident_1,
	u8 e_ident_2,
	u8 e_ident_3,
	u8 e_ident_4,
	u8 e_ident_5,
	u8 e_ident_6,
	u8 e_ident_7,
	u8 e_ident_8,
	u8 e_ident_9,
	u8 e_ident_10,
	u8 e_ident_11,
	u8 e_ident_12,
	u8 e_ident_13,
	u8 e_ident_14,
	u8 e_ident_15,
	Elf32_Half e_type,
	Elf32_Half e_machine,
	Elf32_Word e_version,
	Elf32_Addr e_entry,
	Elf32_Off e_phoff,
	Elf32_Off e_shoff,
	Elf32_Word e_flags,
	Elf32_Half e_ehsize,
	Elf32_Half e_phentsize,
	Elf32_Half e_phnum,
	Elf32_Half e_shentsize,
	Elf32_Half e_shnum,
	Elf32_Half e_shstrndx;
}
structure Elf32_Phdr {
	Elf32_Word p_type,
	Elf32_Off p_offset,
	Elf32_Addr p_vaddr,
	Elf32_Addr p_paddr,
	Elf32_Word p_filesz,
	Elf32_Word p_memsz,
	Elf32_Word p_flags,
	Elf32_Word p_align;
}
structure Thread_state {
	u32 eax,
	u32 ebx,
	u32 ecx,
	u32 edx,
	u32 ebp,
	u32 esp,
	u32 esi,
	u32 edi,
	u32 eip,
	u32 eflags,
	u16 cs,
	u16 ds,
	u16 ss,
	u16 es,
	u16 fs,
	u16 gs;
}
int cpy(addr dest, addr from, uint count) {
	:cpy_loop1;
	if (count == 0) {
		return 0;
	}
	(from to *u8)@ -> (dest to *u8);
	from = from + 1;
	dest = dest + 1;
	count = count - 1;
	goto cpy_loop1;
}
int fill(addr dest, u8 val, uint count) {
	:fill_loop1;
	if (count == 0) {
		return 0;
	}
	val -> (dest to *u8);
	dest = dest + 1;
	count = count - 1;
	goto fill_loop1;
}
int loadSeg(*Elf32_Phdr seg, addr fileBase, addr base, *addr stack) {/* TODO Fail if base address alignment is insufficient */
	Elf32_Word t = seg.p_type@;
	if ((t == 0) | (t == 4) | (t == 6)) {
		return 0;
	}
	if (t == 2) {
		return 19;/* Dynamic linking is not supported */
	}
	if (t == 3) {
		return 20;/* Program interpretation is not supported */
	}
	if (t == 5) {
		return 21;/* Unsupported segment type */
	}
	if ((t > 0x70000000) & (t <= 0x7fffffff)) {
		return 22;/* Unrecognised processor-specific segment type */
		/* TODO Check for these in the SystemV ABI for i386 */
	}
	if (t > 6) {
		if (t != (0x6474e551 as u32)) {/* Disregard of PT_GNU_STACK because all segments are executable *//* TODO Pay attention to the p_flags value of PT_GNU_STACK when p_flags becomes used, in order to set executability of the stack accordingly */
			return 23;/* Unrecognised segment type */
		}
	}
	/* TODO Use p_flags */
	if ((seg.p_filesz@) > (seg.p_memsz@)) {
		return 24;/* Memory image is of smaller size than file image */
	}
	cpy((base + (seg.p_vaddr@)) to addr, (fileBase + (seg.p_offset@)) to addr, seg.p_filesz@ to uint);
	if ((seg.p_memsz@) > (seg.p_filesz@)) {
		fill((base + (seg.p_vaddr@) + (seg.p_filesz@)) to addr, 0x00 as u8, ((seg.p_memsz@) - (seg.p_filesz@)) to uint);
	}
	addr s = base + (seg.p_vaddr@) + (seg.p_memsz@);
	if (s > (stack@)) {
		s -> stack;
	}
	return 0;
}
int loadELF(*Elf32_Ehdr prgm, addr base, *addr s) {
	if (prgm.e_ident@ != 0x7F) {
		return 1;/* Invalid magic */
	}
	if (prgm.e_ident_1@ != 0x45) {
		return 1;
	}
	if (prgm.e_ident_2@ != 0x4C) {
		return 1;
	}
	if (prgm.e_ident_3@ != 0x46) {
		return 1;
	}
	u8 c = prgm.e_ident_4@;
	if (c == 0) {
		return 2;/* Invalid ELF class */
	}
	if (c == 2) {
		return 3;/* ELF class not supported */
	}
	if (c > 2) {
		return 4;/* ELF class not recognised */
	}
	c = prgm.e_ident_5@;
	if (c == 0) {
		return 5;/* Invalid data encoding */
	}
	if (c == 2) {
		return 6;/* Data encoding not supported */
	}
	if (c > 2) {
		return 7;/* Unrecognised data encoding */
	}
	c = prgm.e_ident_6@;
	if (c != (prgm.e_version@)) {
		return 8;/* Inconsistent ELF version identifier */
	}
	if (c == 0) {
		return 9;/* Invalid ELF version */
	}
	if (c > 1) {
		return 10;/* Unrecognised ELF version identifier */
	}
	int t = prgm.e_type@ to int;
	if (t == 0) {
		return 11;/* No ELF file type */
	}
	if (t == 1) {
		return 12;/* ELF relocatable file */
	}
	if (t == 3) {
		return 13;/* ELF shared object file */
	}
	if (t == 4) {
		return 14;/* ELF core file */
	}
	if (t >= 0xff00) {
		return 15;/* Unrecognised processor-specific ELF file type */
		/* TODO find processor-specific types for SystemV i386 */
	}
	if (t != 2) {
		return 16;/* Unrecognised ELF file type */
	}
	t = prgm.e_machine@;
	if ((t <= 8) & (t != 0) & (t != 3) & (t != 6)) {
		return 17;/* Unsupported architecture */
	}
	if ((t > 8) | (t == 6)) {
		return 18;/* Unrecognised architecture */
	}
	addr*Elf32_Phdr seg = prgm + (prgm.e_phoff@);
	uint ps = prgm.e_phentsize@;
	uint pnum = prgm.e_phnum@;
	int res = 0;
	:loadELF_loop1;
	if (pnum == 0) {
		return 0;
	}
	res = loadSeg(seg, prgm, base, s);
	if (res != 0) {
		return res;
	}
	seg = seg + ps;
	pnum = pnum - 1;
	goto loadELF_loop1;
}
int makeMemseg(a32 base, u8 priv, *u16 segRet) {/* ERRORS CANNOT BE ISSUED AFTER INCREMENTATION OF THE LGDT STRUCTURE LENGTH PROPERTY */
	if (priv >= 4) {
		return 26;/* Invalid permission level */
	}
	uint segB = findSeg();
	if (segB == 0) {
		return 25;/* Too many segments */
	}
	segB as u16 -> segRet;
	segB = segB - 1;
	a32*u16 sd = (((0x07fc as a32*u32)@) + segB + 1) as a32*u16;
	(0xffff as u16) -> (sd[0]);
	(base as u16) -> (sd[1]);
	(((((priv as u32) << 13) | 0x9a00) | (((base >> 16) & 0x00ff) as u32)) as u16) -> (sd[2]);
	((0x00cf | (((base >> 16) & 0xff00) as u32)) as u16) -> (sd[3]);
	(0xffff as u16) -> (sd[4]);
	(base as u16) -> (sd[5]);
	(((((priv as u32) << 13) | 0x9200) | (((base >> 16) & 0x00ff) as u32)) as u16) -> (sd[6]);
	((0x00cf | (((base >> 16) & 0xff00) as u32)) as u16) -> (sd[7]);
	
	/*
	((0x7fa as *u8)@ + 16) as u8 -> (0xb8000 as *u8);
	((0x7fb as *u8)@ + 16) as u8 -> (0xb8002 as *u8);
	((0x7fc as *u8)@ + 16) as u8 -> (0xb8004 as *u8);
	((0x7fd as *u8)@ + 16) as u8 -> (0xb8006 as *u8);
	((0x7fe as *u8)@ + 16) as u8 -> (0xb8008 as *u8);
	((0x7ff as *u8)@ + 16) as u8 -> (0xb800a as *u8);
	:ege;
	goto ege;
	*/



	/&xorl %eax,%eax
movw $0x07fa,%ax
lgdt (%eax)
&/
	return 0;
}
int execELF(addr base, uint entry, *Thread_state state, addr stackAddr) {
	u16 segB;
	int i = makeMemseg(base, 0x00, segB$);/* ERRORS CANNOT BE ISSUED AFTER CREATION OF THE LGDT ENTRY */
	if (i != 0) {
		return i;
	}
	0x00000000 as u32 -> state.eax;
	0x00000000 as u32 -> state.ebx;
	0x00000000 as u32 -> state.ecx;
	0x00000000 as u32 -> state.edx;
	0x00000000 as u32 -> state.ebp;/* TODO What value should this take? */
	stackAddr as u32 -> state.esp;
	0x00000000 as u32 -> state.esi;
	0x00000000 as u32 -> state.edi;
	entry as u32 -> state.eip;
	0x00000202 as u32 -> state.eflags;
	segB as u16 -> state.cs;
	(segB + (0x0008 as u16)) as u16 -> state.ds;
	(segB + (0x0008 as u16)) as u16 -> state.ss;
	(segB + (0x0008 as u16)) as u16 -> state.es;
	(segB + (0x0008 as u16)) as u16 -> state.fs;
	(segB + (0x0008 as u16)) as u16 -> state.gs;
	return 0;/* TODO Ensure that all uninitialised memory is zeroed */
}
/&Thread_run:# void Thread_run(struct Thread_state*)
.globl Thread_run
movl 4(%esp),%ebx
movw 0x2c(%ebx),%dx
movw %dx,%ss
movw 0x2e(%ebx),%dx
movw %dx,%es
movw 0x30(%ebx),%dx
movw %dx,%fs
movw 0x32(%ebx),%dx
movw %dx,%gs
movl 0x10(%ebx),%ebp
movl 0x14(%ebx),%esp
movl 0x18(%ebx),%esi
movl 0x1c(%ebx),%edi
pushl 0x24(%ebx)
pushw $0x00
pushw 0x28(%ebx)
pushl 0x20(%ebx)
pushl (%ebx)
pushl 0x04(%ebx)
pushl 0x08(%ebx)
pushl 0x0c(%ebx)
pushw 0x2a(%ebx)
popw %ds
popl %edx
popl %ecx
popl %ebx
popl %eax
iretl
farRunELF:
.globl farRunELF#%eax: elf, %edx: memArea, %ecx: state; %ebx, %esi, %edi: Scratch; Return: %eax
movw %ss,%bx
rorl $16,%ebx
movw %ds,%bx
movl %ebx,%esi
movl %esp,%edi
movw $0x10,%bx
movw %bx,%ds
movw %bx,%ss
movl $0x00010000,%esp
pushl %edi
pushl %esi
pushl %ebp
xorl %ebp,%ebp
pushl %ecx
pushl %edx
pushl %eax
call runELF
popl %ebx
popl %ebx
popl %ebx
popl %ebp
popl %ebx
popl %esp
movw %bx,%ds
roll $16,%ebx
movw %bx,%ss
lret
&/
int runELF(addr elf, addr memArea, *Thread_state state) {
	addr s = memArea;
	int i = loadELF(elf as *Elf32_Ehdr, memArea, s$);
	if (i != 0) {
		return i;
	}
	s = s + 0x00200000 - memArea;
	s = s - (s % 4);
	/*i = execELF(memArea, (elf as *Elf32_Ehdr).e_entry@, state, s);*/
	i = execELF(memArea, (elf as *Elf32_Ehdr).e_entry@, state, 0x7ffff0 - $$RELOC$$);
	if (i != 0) {
		return i;
	}
	return 0;
}
