// Do NOT declare any strings before this one
// Reserve space for the command line, which is null-terminated
// Do not use the length property of this string for finding the length of the comand line, use the variable named `commandlength'
declstr commandline "                                                                                                                                                                                                                                                                "
decl commandlength arg0
declstr fail "Failed to complete requested operation\n"
declstr unknown "Unknown operation, valid commands are: kernel32\n"
declstr disabled "The requested feature has been disabled\n"
declstr sys16exit "returned: 0x"
// Enters after the user enters a newline in the shell, this acts as the command-processing and executive part of the shell and then returns with lret
decl theen 0
call handle
theen = res
//call printstr commandline_addr , commandlength
if theen
    if theen ^ 2
        call bootkernel32
        call printstr fail_addr , fail_len
	theen = 0
    endif
    if theen
    startraw
    	pushw %ds
	pushw %es
	movw $0x07c0,%ax
	movw %ax,%ds
	pushw %bp
	movw %sp,%bx
	movw %ss,%dx
	movw %ax,%ss
	movw $0xfff0,%sp
	pushw %dx
	pushw %bx
	subw $0x0c,%sp
	movw $0x00,%bp
	# lcallw $0x07c0,$sys16
	xorw %ax,%ax
	addw $0x0c,%sp
	popw %bx
	popw %ss
	movw %bx,%sp
	popw %bp
	popw %es
	popw %ds
	pushw %ax
    endraw
    call printstr sys16exit_addr , sys16exit_len
    startraw
    	popw %ax
	pushw %ds:0x18
	pushw %ds:0x16
	movw %ax,%cx
	andb $0x0f,%al
	addb $0x30,%al
	cmpb $0x39,%al
	jbe noa0
	addb $0x07,%al
	noa0:
	movb %al,%ds:0x19
	shrw $4,%cx
	movb %cl,%al
	andb $0x0f,%al
        addb $0x30,%al
        cmpb $0x39,%al
        jbe noa1
        addb $0x07,%al
        noa1:
        movb %al,%ds:0x18
        shrw $4,%cx
        movb %cl,%al
	andb $0x0f,%al
        addb $0x30,%al
        cmpb $0x39,%al
        jbe noa2
        addb $0x07,%al
        noa2:
        movb %al,%ds:0x17
        shrw $4,%cx
        movb %cl,%al
	andb $0x0f,%al
        addb $0x30,%al
        cmpb $0x39,%al
        jbe noa3
        addb $0x07,%al
        noa3:
        movb %al,%ds:0x16
    endraw
    call printmem 0x16 , 4
    startraw
	popw %ds:0x16
	popw %ds:0x18
    endraw
    call printline
    endif
    theen = 1
endif
if theen ^ 1
    call printstr unknown_addr , unknown_len
endif
startraw
lret
endraw
func handle 0
startraw
    cmpw $0x656b,%es:0x00
    jnz noboo
    cmpw $0x6e72,%es:0x02
    jnz noboo
    cmpw $0x6c65,%es:0x04
    jnz noboo
    cmpw $0x3233,%es:0x06
    jnz noboo
    cmpb $0x00,%es:0x08
    jnz noboo
    movw $0x01,%ds:0x1e
    jmp afe
    noboo:
    cmpw $0x7973,%es:0x00
    jnz nei
    cmpw $0x3173,%es:0x02
    jnz nei
    cmpw $0x0036,%es:0x04
    jnz nei
    jmp nei
    movw $0x02,%ds:0x1e
    jmp afe
    nei:
    movw $0x00,%ds:0x1e
    afe:
endraw
    return res
endfunc
func bootkernel32 0
startraw
    movw $0x04,%dx
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    lcall *%ss:(%di)
    popw %ax
    popw %ax
    movw %dx,%ds:0x1e
endraw
    return res
endfunc
// Standard library functions
func read 3
startraw
    movw %ds:0x1c,%bx
    movw %ds:0x1a,%cx
    movw $0x03,%dx
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    pushw %es
    movw %ds,%ax
    movw %ax,%es
    movw %ds:0x18,%ax
    lcall *%ss:(%di)
    movw %dx,%ds:0x1e
    popw %es
    popw %ax
    popw %ax
endraw
    return res
endfunc
func printline 0
startraw
    pushw %ds:0x18
    movw $0x0a,%ds:0x18
endraw
    call printmem 0x18 , 1
startraw
    popw %ds:0x18
endraw
endfunc
func printmem 2
startraw
    movw %ds:0x1c,%bx
    movw %ds:0x1a,%cx
    movw $0x02,%dx
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    pushw %es
    movw %ds,%ax
    movw %ax,%es
    lcall *%ss:(%di)
    movw %dx,%ds:0x1e
    popw %es
    popw %ax
    popw %ax
endraw
    return res
endfunc
func printstr 2
startraw
    movw %ds:0x1c,%bx
    movw %ds:0x1a,%cx
    movw $0x02,%dx
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    lcall *%ss:(%di)
    movw %dx,%ds:0x1e
    popw %ax
    popw %ax
endraw
    return res
endfunc
func readcode 0
startraw
    pushw %ds:0x16
endraw
    call read 0x16 , 1 , 1
startraw
    movw %ds:0x16,%ax
    movw %ax,%ds:0x1e
    popw %ds:0x16
endraw
    return res
endfunc
func readchar 0
startraw
    pushw %ds:0x16
endraw
    call read 0x16 , 1 , 0
startraw
    movw %ds:0x16,%ax
    xorb %ah,%ah
    movw %ax,%ds:0x1e
    popw %ds:0x16
endraw
    return res
endfunc
func bootedDiskette144_read 3
startraw
    movw %ds:0x1c,%ax
    pushw %es
    movw %ds:0x1a,%es
    movw %ds:0x18,%bx
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    movw $0x01,%dx
    lcall *%ss:(%di)
    movw %dx,%ds:0x1e
    popw %ax
    popw %ax
    popw %es
endraw
    return res
endfunc
func printbase 2
startraw
    xorw %dx,%dx
    movw %ds:0x1c,%ax
    movw %ds:0x1a,%di
    divw %di
    cmpw $0x0a,%dx
    jc std_printdec_nolett
    addb $0x27,%dl
    std_printdec_nolett:
    addb $0x30,%dl
    xorb %bh,%bh
    movb %dl,%bl
    movw $0x02,%cx
    testw %ax,%ax
    jz std_printdec_end
    std_printdec_loop:
    pushw %bx
    xorw %dx,%dx
    divw %di
    cmpw $0x0a,%dx
    jc std_printdec_joe
    addb $0x27,%dl
    std_printdec_joe:
    addb $0x30,%dl
    movb %dl,%bh
    incw %cx
    testw %ax,%ax
    jz std_printdec_end
    xorw %dx,%dx
    divw %di
    cmpw $0x0a,%dx
    jc std_printdec_geh
    addb $0x27,%dl
    std_printdec_geh:
    addb $0x30,%dl
    movb %dl,%bl
    incw %cx
    testw %ax,%ax
    jz std_printdec_end
    jmp std_printdec_loop
    std_printdec_end:
    pushw %bx
    movw %cx,%bx
    andw $0x01,%bx
    addw %sp,%bx
    pushw %es
    movw %ss,%ax
    movw %ax,%es
    pushw $0x07c0
    pushw $0x0800
    movw %sp,%di
    movw $0x02,%dx
    decw %cx
    lcall *%ss:(%di)
    popw %ax
    popw %ax
    popw %es
    shrw $0x01,%cx
    incw %cx
    std_printdec_poploop:
    popw %ax
    loop std_printdec_poploop
    movw %dx,%ds:0x1e
endraw
    return res
endfunc
startraw
endraw
